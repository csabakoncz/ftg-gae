// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ck.rt1.model;

import com.ck.rt1.model.Template;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Template_Roo_Finder {
    
    public static Long Template.countFindTemplatesByContentLike(String content) {
        if (content == null || content.length() == 0) throw new IllegalArgumentException("The content argument is required");
        content = content.replace('*', '%');
        if (content.charAt(0) != '%') {
            content = "%" + content;
        }
        if (content.charAt(content.length() - 1) != '%') {
            content = content + "%";
        }
        EntityManager em = Template.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Template AS o WHERE LOWER(o.content) LIKE LOWER(:content)", Long.class);
        q.setParameter("content", content);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Template.countFindTemplatesByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Template.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Template AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Long.class);
        q.setParameter("name", name);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Template> Template.findTemplatesByContentLike(String content) {
        if (content == null || content.length() == 0) throw new IllegalArgumentException("The content argument is required");
        content = content.replace('*', '%');
        if (content.charAt(0) != '%') {
            content = "%" + content;
        }
        if (content.charAt(content.length() - 1) != '%') {
            content = content + "%";
        }
        EntityManager em = Template.entityManager();
        TypedQuery<Template> q = em.createQuery("SELECT o FROM Template AS o WHERE LOWER(o.content) LIKE LOWER(:content)", Template.class);
        q.setParameter("content", content);
        return q;
    }
    
    public static TypedQuery<Template> Template.findTemplatesByContentLike(String content, String sortFieldName, String sortOrder) {
        if (content == null || content.length() == 0) throw new IllegalArgumentException("The content argument is required");
        content = content.replace('*', '%');
        if (content.charAt(0) != '%') {
            content = "%" + content;
        }
        if (content.charAt(content.length() - 1) != '%') {
            content = content + "%";
        }
        EntityManager em = Template.entityManager();
        String jpaQuery = "SELECT o FROM Template AS o WHERE LOWER(o.content) LIKE LOWER(:content)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Template> q = em.createQuery(jpaQuery, Template.class);
        q.setParameter("content", content);
        return q;
    }
    
    public static TypedQuery<Template> Template.findTemplatesByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Template.entityManager();
        TypedQuery<Template> q = em.createQuery("SELECT o FROM Template AS o WHERE LOWER(o.name) LIKE LOWER(:name)", Template.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Template> Template.findTemplatesByNameLike(String name, String sortFieldName, String sortOrder) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Template.entityManager();
        String jpaQuery = "SELECT o FROM Template AS o WHERE LOWER(o.name) LIKE LOWER(:name)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Template> q = em.createQuery(jpaQuery, Template.class);
        q.setParameter("name", name);
        return q;
    }
    
}
